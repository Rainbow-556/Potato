MVP规则：
Separate your app business logic by moving it to a plain java Presenter object
Spend time writing a clean interface between your Presenter and your View
Have Fragment, Activities or custom views implement the View interface
For lists, have the ViewHolder implement the View interface
Test your Presenter thoroughly
Retain your Presenters during orientation change
View不处理任何业务逻辑，只产生事件和提供必要的数据，
Presenter处理所有业务逻辑，处理之后，再跟Model交互，再把最终结果反映到View上
比如：
登录，点击登录按钮，View只是把account和password传给Presenter，由Presenter来做参数合法性校验，如果非法参数则回调View的对应错误显示
点击事件的页面跳转，如果不需要逻辑判断，则直接由View层跳转，否则交给Presenter去判断逻辑再调用View层去跳转
UI上的每部分都可以分割独立出来，每个独立的部分都是View，这些View都能拥有自己的Presenter，这样就把页面分成了很多个小块，利于维护
可以当做View的：Activity、Fragment、自定义View、ListView/RecyclerView/Adapter/ViewHolder等

分层：
ui
	-base //MVP、Activity基类
	复杂页面使用MVP模式，简单的页面还是使用MVC
	单Activity多Fragment结构：
	    方案1：activity有自己的p，fragment也有自己的p (这种比较好)
	    方案2：首页单个Activity包含多个Fragment的结构时，View包含所有Fragment的事件接口，每个Fragment都去实现View接口，
            	Presenter只有一个，每个Fragment持有Presenter的引用，在事件发生时调用Presenter去处理，Presenter处理完了再调用
            	Activity实现的View来分发数据，在Activity中分发该数据由哪个Fragment来处理

domain //业务逻辑

model //数据中心

Manager
	UserManager


基础库：
是否需要把基础lib单独一个module？

Retrofit
	统一结果解析/错误处理，map操作符把结果做转换
		BaseObserver的onNext()中解析BaseResponse<T>，T为Data，包含ErrorInfo
		compose操作符处理Observable基础设置，例如subscribeOn(IO Thread)，observeOn(AndroidMainThread)
	Cache Response
	等待多个Request都成功后才回调
	基于参数的加签，interceptor
	上传/下载，进度监听
	

Router

Dialog

下拉刷新/上拉加载控件

Button

轮播图

权限

EventBus    1

交易密码弹窗

验证码倒计时控件





